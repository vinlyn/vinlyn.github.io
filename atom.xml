<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>web</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-04T16:57:26.127Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>vinlyn huang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于eventloop的理解</title>
    <link href="http://yoursite.com/2018/01/03/%E5%85%B3%E4%BA%8Eeventloop%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/01/03/关于eventloop的理解/</id>
    <published>2018-01-03T12:00:36.000Z</published>
    <updated>2018-01-04T16:57:26.127Z</updated>
    
    <content type="html"><![CDATA[<h4 id="唠唠叨叨"><a href="#唠唠叨叨" class="headerlink" title="唠唠叨叨"></a>唠唠叨叨</h4><p>距离上一篇博客已经快一年，制定2018年的目标的时候，想了想2017年的基本没有完成，就把2017改个title，变成2018的然后就完事。在此希望18年不会再如此荒废。闲话不多说，进入正题。</p>
<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>众所周知，JavaScript是单线程的，任务都只在一个线程上面执行，那么意味着只有等前面一个任务处理完毕，才会执行后一个任务，如果前一个任务执行时间很长，后面的任务就只能一直等着，那么对于ajax、Dom操作，setTimeout、Promise等这些耗时的任务，JavaScript是怎么处理的（不同环境不同实现，这里应该是相应的JavaScript运行环境是怎么处理的），以不至于让程序处于一直等待的状态。event loop就是JavaScript用来实现异步操作，解决上述问题的一种机制。</p>
<h4 id="事件循环（event-loop）"><a href="#事件循环（event-loop）" class="headerlink" title="事件循环（event loop）"></a>事件循环（event loop）</h4><p>先讲讲什么是事件循环，<br>W3给的原文：To coordinate events, user interaction, scripts, rendering, networking, and so forth, user agents must use event loops as described in this section. There are two kinds of event loops: those for browsing contexts, and those for workers.（为了协调事件，用户交互，脚本，渲染，网络等，用户代理必须使用本节描述的事件循环。有两种事件循环：用于浏览上下文的事件循环，以及针对workers的事件循环）。这个解释跟上述为什么要有event loop相吻合。<br>事件循环是怎么做的：Javascript在主线程运行的时候，会有一个堆，一个执行栈，一个事件循环，一个或者多个任务队列。堆：相关的对象会被分配在堆中。在Javascript运行时，程序中的代码会依次进入执行栈中，然后执行，当遇到需要延时执行的事件时，如setTimeout，ajax，Dom操作等，Javascript就会把这些方法交给浏览器即（webAPI）的其他模块处理，使其不至于阻塞主线程的执行，等浏览器的模块处理完延时事件后，会把相应的回调压入任务队列中，等执行栈中的事件执行完毕后，主线程通过事件循环去任务队列中读取相应的回调，并进入执行栈进行执行。等执行栈的任务执行完之后，再去任务队列读取相应回调，如此往复。如下图：<br><img src="/images/eventloop/eventloop1.jpeg" style="width: 400px;"><br>下面用人家演讲的视频截图来说明这个过程。</p>
<p>程序等待执行时，执行栈，webAPI，任务队列都为空。<br><img src="/images/eventloop/eventloop2.jpeg" style="width: 600px;"></p>
<p>程序开始执行时，先将一个main()主方法加入执行栈中，此方法相当于程序的入口。<br><img src="/images/eventloop/eventloop3.jpeg" style="width: 600px;"></p>
<p>继续执行console.log(‘Hi’)方法，方法加入执行栈中；console.log属于webkit本身自己的方法，不属于webAPI的方法，立即执行并移出执行栈。输出Hi<br><img src="/images/eventloop/eventloop4.jpeg" style="width: 600px;"><br><img src="/images/eventloop/eventloop5.jpeg" style="width: 600px;"></p>
<p>程序继续往下执行，将setTimeout加入执行栈中并执行，系统将从webAPI中创建一个计时器，来处理倒计时的任务，然后setTimeout移出执行栈。<br><img src="/images/eventloop/eventloop6.jpeg" style="width: 600px;"><br><img src="/images/eventloop/eventloop7.jpeg" style="width: 600px;"><br><img src="/images/eventloop/eventloop8.jpeg" style="width: 600px;"></p>
<p>在setTimeout方法出栈执行后，立即将下面的console.log加入执行栈中，然后立即执行并移出执行栈。输出SJS。<br><img src="/images/eventloop/eventloop9.jpeg" style="width: 600px;"><br><img src="/images/eventloop/eventloop10.jpeg" style="width: 600px;"></p>
<p>主函数main()执行完毕，移出执行栈。<br><img src="/images/eventloop/eventloop11.jpeg" style="width: 600px;"></p>
<p>等webAPI，这里chrome是timer模块，处理setTimeout达到触发条件，就是延时5s后，会将回调方法压入任务队列中，也就是下面的task queue中。<br><img src="/images/eventloop/eventloop12.jpeg" style="width: 600px;"></p>
<p>当执行栈为空时，就通过事件循环去轮询任务队列，查看是否有任务需要执行，这时候就检查到了达到条件的回调方法，然后事件循环就把检查到的方法加入到执行栈中，并依次调用回调里面的方法，然后依次执行方法，运行console.log，输出there，都执行完毕，清空执行栈。事件循环继续去轮询任务队列，并如此反复。<br><img src="/images/eventloop/eventloop13.jpeg" style="width: 600px;"><br><img src="/images/eventloop/eventloop14.jpeg" style="width: 600px;"><br><img src="/images/eventloop/eventloop15.jpeg" style="width: 600px;"><br><img src="/images/eventloop/eventloop16.jpeg" style="width: 600px;"><br><img src="/images/eventloop/eventloop17.jpeg" style="width: 600px;"></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>整个事件循环的过程大概是如此，每个环境中会包含的多个任务队列，不同的环境事件循环读取每个队列的先后顺序有可能是不一样的，但大体大同小异。web worker有自己的堆、栈、消息队列和事件循环，两个不同的运行时只能通过postMessage方法进行通信。Node环境的实现又是不一样(Node的要等做完功课后再来介绍)，当然这篇文章主要是看各位大神的文章拼凑而成的，只加上一点点自己的小理解，然后重复做工作加深一下自己的理解，下面会以这个为基础来讲讲setTimeout、setInterval、Dom事件、Promise是怎么工作的，执行顺序又是怎么样。<br>以上如有错误遗漏，望更正补充。</p>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://www.w3.org/TR/html5/webappapis.html#event-loops" target="_blank" rel="external">W3: Event loops</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop" target="_blank" rel="external">MDN：并发模型与事件循环</a><br><a href="http://latentflip.com/loupe/?code=ZnVuY3Rpb24gZ2V0WSAoeCkgewogICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2UocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiBwcm9taXNlVGltZW91dCgpIHsKICAgICAgICAgICAgcmVzb2x2ZSgoMyAqIHgpIC0gMSk7CiAgICAgICAgfSwgMCk7CiAgICB9KTsKfQoKZnVuY3Rpb24gZm9vIChiYXIsIGJheikgewogICAgdmFyIHggPSBiYXIgKiBiYXo7CgogICAgcmV0dXJuIGdldFkoeCkKICAgICAgICAudGhlbihmdW5jdGlvbiByZXR1cm5BcnJheSh5KSB7CiAgICAgICAgICAgIHJldHVybiBbIHgsIHkgXTsKICAgICAgICB9KTsKfQpzZXRUaW1lb3V0KGZ1bmN0aW9uIHRpbWVvdXQoKSB7CiAgICBjb25zb2xlLmxvZygndGltZW91dCcpCn0sIDApCgpmb28oMTAsIDIwKS50aGVuKGZ1bmN0aW9uIGxvZ01zZyhtc2dzKSB7CiAgICBjb25zb2xlLmxvZyhtc2cpOwp9KTs%3D!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D" target="_blank" rel="external">事件循环示例，可在线写代码，观看过程</a><br><a href="http://www.alloyteam.com/2015/10/turning-to-javascript-series-from-settimeout-said-the-event-loop-model/" target="_blank" rel="external">【转向Javascript系列】从setTimeout说事件循环模型</a><br><a href="http://www.ruanyifeng.com/blog/2014/10/event-loop.html" target="_blank" rel="external">JavaScript 运行机制详解：再谈Event Loop</a><br><a href="http://blog.csdn.net/lin_credible/article/details/40143961" target="_blank" rel="external">【朴灵评注】JavaScript 运行机制详解：再谈Event Loop</a><br><a href="https://blog.sessionstack.com/how-javascript-works-event-loop-and-the-rise-of-async-programming-5-ways-to-better-coding-with-2f077c4438b5" target="_blank" rel="external">How JavaScript works: Event loop and the rise of Async programming + 5 ways to better coding with async/await</a><br><a href="https://vimeo.com/96425312" target="_blank" rel="external">Philip Roberts: Help, I’m stuck in an event-loop.</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;唠唠叨叨&quot;&gt;&lt;a href=&quot;#唠唠叨叨&quot; class=&quot;headerlink&quot; title=&quot;唠唠叨叨&quot;&gt;&lt;/a&gt;唠唠叨叨&lt;/h4&gt;&lt;p&gt;距离上一篇博客已经快一年，制定2018年的目标的时候，想了想2017年的基本没有完成，就把2017改个title，变成201
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Webpack配置详解</title>
    <link href="http://yoursite.com/2017/03/09/webpack%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E/"/>
    <id>http://yoursite.com/2017/03/09/webpack常用配置说明/</id>
    <published>2017-03-09T06:26:58.000Z</published>
    <updated>2018-01-04T10:20:55.455Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>webpack是目前非常火的模块化打包工具，网上有非常多的教程，但是很多都是教大家怎么配置出一个可以打包的配置文件，并没有具体说明每个配置作用，就造成，配置文件可以跑了，却依然莫名其妙，所以今天就来说说webpack具体每个配置项的作用。此篇文章介绍以webpack2为主。</p>
<h3 id="什么是webpack"><a href="#什么是webpack" class="headerlink" title="什么是webpack"></a>什么是webpack</h3><p>Webpack是一个强力的模块打包器。所谓包(bundle)就是一个JavaScript文件，它把一堆资源(assets)合并在一起，以便它们可以在同一个文件请求中发回给客户端。 包中可以包含JavaScript、CSS样式、HTML以及很多其它类型的文件。其实就是根据模块的依赖关系进行静态分析，然后把这些模块按照执行的规则生成对应的静态资源。在webpack的概念里，万物都可以当成模块来使用，不只是js，如图片，css等也可以。如图<br><img src="/images/webpack/webpack.png" style="width: 100%;"></p>
<h3 id="webpack安装"><a href="#webpack安装" class="headerlink" title="webpack安装"></a>webpack安装</h3><p>首先要安装node，然后安装webpack。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install webpack --save-dev</div></pre></td></tr></table></figure></p>
<h3 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h3><h4 id="context"><a href="#context" class="headerlink" title="context"></a>context</h4><p>基础目录，绝对路径，只针对入口起点(entry point)和加载器(loader)。<br>在entry和loader中就可以以context为绝对路径。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">context</span>: path.resolve(__dirname, <span class="string">'app'</span>),</div><div class="line">  <span class="comment">//如果没有配置context，则该配置为相对路径的话，entry按照我的目录结构应为./app/entry.js。</span></div><div class="line">  entry: <span class="string">'./entry.js'</span>, </div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">filename</span>: <span class="string">'bundle.js'</span>,</div><div class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">'dist'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h4 id="entry"><a href="#entry" class="headerlink" title="entry"></a>entry</h4><p>起点或是应用程序的起点入口。<br>string | [string] | object { key: string | [string] }<br>string 单个文件路径，打包到一个文件里面。<br>[string] 多个文件路径，一起打包到一个文件里面。<br>object { key: string | [string] } 多个文件路径，打包出多个文件，并且打包的文件会与key来命名。<br><img src="/images/webpack/webpack-entry.png" style="width: 100%;"></p>
<h4 id="output"><a href="#output" class="headerlink" title="output"></a>output</h4><p>webpack 如何去输出、以及在哪里输出你的「bundle、asset 和其他你所打包或使用 webpack 载入的任何内容」。即出口，处理打包后的文件，如放在什么位置，取什么名字等。下面将列出几个常用的，并附上打包后的结果图。<a href="https://doc.webpack-china.org/configuration/output/" target="_blank" rel="external">详情可见官方Api</a></p>
<h5 id="output-filename"><a href="#output-filename" class="headerlink" title="output.filename"></a>output.filename</h5><p>对于单个入口，即entry为string或[string]<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">filename: <span class="string">'bundle.js'</span> <span class="comment">// 如不命名，默认为main.js</span></div></pre></td></tr></table></figure></p>
<p>对于多个入口，即entry为object { key: string | [string] }<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 默认值[name].js，</span></div><div class="line"><span class="comment">// hash和chunkhash区别：hash相当于，整个模块的hash,如果在打包的文件中有一个文件改变，那么这个hash也会改变，</span></div><div class="line"><span class="comment">// 且全局唯一，而chunkhash只有在自己的块有改动过才会改变，所以如果分成很多个模块打包的话，一般使用chunkhash。</span></div><div class="line"><span class="comment">// chunk id：webpack会为每个引用的模块生成一个ID, 这个id就是chunk id。</span></div><div class="line">filename: <span class="string">"[name].bundle.js"</span> <span class="comment">// 使用入口名称，即key</span></div><div class="line">filename: <span class="string">"[id].bundle.js"</span>   <span class="comment">// 使用内部chunk id, </span></div><div class="line">filename: <span class="string">"[name].[hash].bundle.js"</span> <span class="comment">// 添加唯一的hash</span></div><div class="line">filename: <span class="string">"[chunkhash].bundle.js"</span> <span class="comment">// 基于每个chunk的内容生成的hash</span></div></pre></td></tr></table></figure></p>
<p><img src="/images/webpack/webpack-output1.png" style="width: 100%;"><br><img src="/images/webpack/webpack-output2.png" style="width: 100%;"><br>补充：<a href="http://www.cnblogs.com/ihardcoder/p/5623411.html" target="_blank" rel="external">hash和chunkhash的区别详见</a></p>
<h5 id="output-path"><a href="#output-path" class="headerlink" title="output.path"></a>output.path</h5><p>生成文件放置的路径（绝对路径）。如上图例子，就是配置在根目录/dist文件下，所以生成的文件都是在dist目录下</p>
<h5 id="output-publicPath"><a href="#output-publicPath" class="headerlink" title="output.publicPath"></a>output.publicPath</h5><p>此项就是配置当你资源保存在CDN，或者别的地方时，使用publicPath来配置cdn的地址或者外部地址。</p>
<h5 id="output-chunkFileName"><a href="#output-chunkFileName" class="headerlink" title="output.chunkFileName"></a>output.chunkFileName</h5><p>未被列在entry中，却又需要被打包出来的文件命名配置。什么场景需要呢？在按需加载（异步）模块的时候，这样的文件是没有被列在entry中的，如使用CommonJS的方式异步加载模块：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>.ensure([<span class="string">"./entry2.js"</span>], <span class="function"><span class="keyword">function</span>(<span class="params">require</span>) </span>&#123; </div><div class="line">    <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">"./entry2.js"</span>); </div><div class="line">&#125;, <span class="string">'entry2'</span>);</div></pre></td></tr></table></figure></p>
<p>异步加载的模块是要以文件形式加载哦，所以这时生成 的文件名是以chunkname配置的，生成出的文件名就是entry2.js。如图<br><img src="/images/webpack/webpack-output3.png" style="width: 100%;"></p>
<h5 id="out-library"><a href="#out-library" class="headerlink" title="out.library"></a>out.library</h5><p>此选项是将webpack打包的脚本变成类库，如果你需要打包成类库，请用此选项。</p>
<h5 id="output-libraryTarget"><a href="#output-libraryTarget" class="headerlink" title="output.libraryTarget"></a>output.libraryTarget</h5><p>此选项是导出为类库时，类库的格式，导出方式为如下几种。<br>“var” - 导出为一个变量：var Library = xxx（默认）<br>“this” - 导出为 this 的一个属性：this[“Library”] = xxx<br>“commonjs” - 导出为 exports 的一个属性：exports[“Library”] = xxx<br>“commonjs2” - 通过 module.exports：module.exports = xxx 导出<br>“amd” - 导出为 AMD（可选命名 - 通过 library 选项设置名称）<br>“umd” - 导出为 AMD，CommonJS2 或者导出为 root 的属性</p>
<h4 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h4><p>模块，在模块化变成中，开发者将程序分解成离散功能块，即我们在程序中import,require进来的东西。</p>
<h5 id="module-noParse"><a href="#module-noParse" class="headerlink" title="module.noParse"></a>module.noParse</h5><p>防止webpack解析哪些任何与给定正则表达式相匹配的文件。忽略的文件不应该被import require,define或者任何其他导入机制调用。忽略大型文件筐文件可以提高系统的构建性能。</p>
<h5 id="module-rules"><a href="#module-rules" class="headerlink" title="module.rules"></a>module.rules</h5><p>创建模块时，匹配请求的规则数组。这些规则能够修改模块的创建方式。这些规则能够对模块(module)应用加载器(loader)，或者修改解析器(parser)。</p>
<h5 id="rule"><a href="#rule" class="headerlink" title="rule"></a>rule</h5><p>规则，配置不同的条件和loader，通过条件匹配不同类型的模块，再通过配置相关的loader对模块进行编译或者说转换。为什么要使用loader，因为webpack本身只能打包js文件，对于其他资源文件如css，图片等是没有办法加载的，所以需要对应的loader将资源加载进来。从配置上也可以看得出来，它主要作用于单个文件。作用如css经过postcss转换成浏览器识别的css，jsx经过babel预编译成js，ES6预编译成ES5等。<a href="https://webpack.js.org/loaders/" target="_blank" rel="external">更多loader…</a><br>该属性有两个主要要素：</p>
<h5 id="rule条件"><a href="#rule条件" class="headerlink" title="rule条件"></a>rule条件</h5><p>即匹配的模块规则。比如正则、路径等。<br>字符串：匹配输入必须以提供的字符串开始。目录绝对路径或文件绝对路径。<br>正则表达式：test 输入值。<br>函数：调用输入的函数，必须返回一个真值(truthy value)以匹配。<br>条件数组：至少一个匹配条件。<br>对象：匹配所有属性。每个属性都有一个定义行为。<br>{ test: Condition }：匹配条件。约定了提供一个正则或正则数组，但不是强制的。<br>{ include: Condition }：匹配条件。约定了提供一个字符串或字符串数组，但不是强制的。<br>{ exclude: Condition }：不能匹配条件。约定了提供一个字符串或字符串数组，但不是强制的。<br>{ and: [Condition] }：匹配所有条件<br>{ or: [Condition] }：匹配任何条件<br>{ not: Condition }：不能匹配条件</p>
<h5 id="rule-use"><a href="#rule-use" class="headerlink" title="rule.use"></a>rule.use</h5><p>配置编译模块的loader和一些相关配置。<br>必须要有一个loader，声明该加载器是使用的哪个loader。<br>可以有一个options属性为字符串或对象。值可以传递到loader中，将其理解为loader 选项配置。<br>有可能也存在一个query的属性，因为它是options的别名。</p>
<h5 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h5><p><img src="/images/webpack/webpack-module.png" style="width: 100%;"><br>上述例子，test匹配css文件，use配置了相关的loader，在entry1.js中使用import ‘./entry1.css’引入模块，webpack编译时，css文件会经过配置loader的编译，最后webpack将编译后的css打包到build-entry1.js中。如图所示，js中有css的代码。使用插件可以将css分离出来，下面将会介绍。</p>
<h4 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h4><p>插件，用于扩展webpack的功能，作用如UglifyJsPlugin压缩，extract-text-webpack-plugin提取css到单独的文件中等。plugins与loader的对比，在于loader是主要用于针对文件的转化，而plugin可以做更多的事情，是对webpack的功能的扩展，而不仅局限于资源的加载。<a href="https://webpack.js.org/plugins/" target="_blank" rel="external">更多插件…</a><br><img src="/images/webpack/webpack-plugins.png" style="width: 100%;"><br>示例说明，用extract-text-webpack-plugin将css单独提取出来。</p>
<h4 id="devtool"><a href="#devtool" class="headerlink" title="devtool"></a>devtool</h4><p>sourceMap：浏览器运行的文件跟源文件是不一致的，所以在调错的时候，需要记录原始代码和生成的代码行数间对应的关系，才能更好的调试，所以sourceMap应运而生。devtool就是为了配置sourceMap的形式。webpack的devtool有七种形式，具体区别比较模糊。详细区分点击<a href="http://www.cnblogs.com/hhhyaaon/p/5657469.html" target="_blank" rel="external">这里</a></p>
<h4 id="stats"><a href="#stats" class="headerlink" title="stats"></a>stats</h4><p>该选项能让你准确地控制显示哪些包的信息。打包的时候显示打包的相关信息。以下两个配置不同的打包信息。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> stats: &#123;</div><div class="line">  <span class="attr">assets</span>: <span class="literal">false</span>,</div><div class="line">  <span class="attr">hash</span>: <span class="literal">false</span>,</div><div class="line">  <span class="attr">timings</span>: <span class="literal">false</span>,</div><div class="line">  <span class="attr">version</span>: <span class="literal">false</span>,</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
<p><img src="/images/webpack/webpack-stats1.png" style="width: 100%;"><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> stats: &#123;</div><div class="line">  <span class="attr">assets</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">hash</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">timings</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">version</span>: <span class="literal">true</span>,</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
<p><img src="/images/webpack/webpack-stats2.png" style="width: 100%;"></p>
<h4 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a>resolve</h4><p>设置模块如何被解析。主要讲常用的两个：</p>
<h5 id="resolve-extensions"><a href="#resolve-extensions" class="headerlink" title="resolve.extensions"></a>resolve.extensions</h5><p>extensions:自动解析确定的扩展, [‘.js’,’.jsx’]可以让我们直接写import ‘a’而不用写import ‘a.js’。</p>
<h5 id="resolve-alias"><a href="#resolve-alias" class="headerlink" title="resolve.alias"></a>resolve.alias</h5><p>alias: 别名, {common：path.resolve(__dirname, ‘src/common/‘)}这样我们就可以在任何地方用import common/utils了，不用再去写import ‘../../../common/utils’。</p>
<h4 id="target"><a href="#target" class="headerlink" title="target"></a>target</h4><p>webpack 能够为多种环境或 target 构建编译，所以我们配置文件没有，因为默认是web，列举几个：</p>
<blockquote>
<p>node：编译为类 Node.js 环境可用（使用 Node.js require 加载 chunk）<br>webworker：编译成一个 WebWorker<br>async-node： 编译为类 Node.js 环境可用（使用 fs 和 vm 异步加载分块）</p>
</blockquote>
<h4 id="externals"><a href="#externals" class="headerlink" title="externals"></a>externals</h4><p>外部扩展，webpack 中的 externals 配置提供了「不从 bundle 中引用依赖」的方式。解决的是，所创建的 bundle 依赖于那些存在于用户环境(consumer environment)中的依赖。 官方解释有点复杂，其实简单来说，就是在这里定义的东西，将不再打包到包里面去了，直接在界面上使用script标签引进就可以了，相当于可以在界面上除了module.js外，还可以加载其他的一些library，提高页面的加载效率。如react、reactDOM、jquery等。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>上面是webpack配置中主要的几种，在了解了webpack每项配置项的作用后，配置的时候就会显得得心应手，而不至于莫名其妙。<a href="https://github.com/vinlyn/webpack-test" target="_blank" rel="external">示例地址</a><br>以上如有错误遗漏，望更正补充。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;webpack是目前非常火的模块化打包工具，网上有非常多的教程，但是很多都是教大家怎么配置出一个可以打包的配置文件，并没有具
    
    </summary>
    
      <category term="教程" scheme="http://yoursite.com/categories/%E6%95%99%E7%A8%8B/"/>
    
      <category term="webpack" scheme="http://yoursite.com/categories/%E6%95%99%E7%A8%8B/webpack/"/>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github Pages搭建个人博客</title>
    <link href="http://yoursite.com/2017/02/24/Hexo-Github-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2017/02/24/Hexo-Github-Pages搭建个人博客/</id>
    <published>2017-02-23T16:30:36.000Z</published>
    <updated>2017-04-10T07:23:09.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>一直想写博客，之前对看过的知识没进行总结，很多知识点，看过即忘，每次都要再重新去找，显得麻烦，又不利于自己的提高，在偷懒了n久之后，就以这篇搭建自己博客开始博客生涯。</p>
<h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><p><a href="https://hexo.io" target="_blank" rel="external">Hexo</a>是一个快速，简单、强大的基于Node的静态博客框架。你只需要通过<a href="http://markdown-zh.readthedocs.io/en/latest/" target="_blank" rel="external">Markdown</a>来写文章，就可以通过Hexo快速生成静态文件，并把静态文件push到github上，就可以拥有自己的个人博客啦。它还有一些很好看的<a href="https://hexo.io/themes/" target="_blank" rel="external">主题</a>可以供你选择。</p>
<h3 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h3><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p>Hexo基于Node，所以必须安装<a href="https://nodejs.org/en/download/" target="_blank" rel="external">Node</a>。<br>如果你需要托管到Github Pages, 还需要安装<a href="https://git-scm.com/" target="_blank" rel="external">git</a>, mac上如果你安装完xcode的话，就会有git了。</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>安装完Node之后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo npm install hexo-cli -g</div><div class="line">hexo init &quot;blog&quot;</div><div class="line">cd blog</div><div class="line">npm install</div><div class="line">hexo server</div></pre></td></tr></table></figure></p>
<p>逐步安装后，网站就建好了，你的个人博客就启动起来啦！<a href="https://hexo.io/zh-cn/docs/setup.html" target="_blank" rel="external">这里可以了解更多配置</a></p>
<h3 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a>GitHub Pages</h3><p>GitHub Pages可以被认为是用户编写的、托管在github上的静态网页。由于它的空间免费稳定，可以用它来介绍你托管在github上的项目，或者搭建自己的网站。</p>
<h3 id="GitHub-Pages配置"><a href="#GitHub-Pages配置" class="headerlink" title="GitHub Pages配置"></a>GitHub Pages配置</h3><p>申请一个github账号<br>创建代码仓库，并且以yourname.github.io命名。如图<br><img src="/images/create_github_io.jpeg" style="width: 600px;"></p>
<h3 id="Hexo与GitHub-Pages"><a href="#Hexo与GitHub-Pages" class="headerlink" title="Hexo与GitHub Pages"></a>Hexo与GitHub Pages</h3><p>想要把本地的Hexo发布的git上面，只要在你的根目录下，找到_config.yml,并增加如下配置就可以了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: https://github.com/vinlyn/vinlyn.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<p>repo地址为上面新建的代码仓库yourname.github.io的地址。<br><img src="/images/repo_address.jpeg" style="width: 600px;"><br>添加完配置后，你只需要在hexo目录下跑下命令，就可以了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo g</div><div class="line">hexo d</div></pre></td></tr></table></figure></p>
<p>命令解释，1.清缓存，2.生成本地发布文件夹，3.发布到Github Pages上。<a href="https://hexo.io/docs/commands.html" target="_blank" rel="external">更多命令</a><br>然后这时候，你只要在浏览器地址上输入yourname.github.io, 你的博客就出来啦。</p>
<h3 id="绑定个人域名"><a href="#绑定个人域名" class="headerlink" title="绑定个人域名"></a>绑定个人域名</h3><h4 id="个人域名"><a href="#个人域名" class="headerlink" title="个人域名"></a>个人域名</h4><p>本人域名是上<a href="https://www.godaddy.com/" target="_blank" rel="external">godaddy</a>上买的，个人觉得还不错。</p>
<h4 id="域名配置"><a href="#域名配置" class="headerlink" title="域名配置"></a>域名配置</h4><p>第一步：在博客的根目录下找到source文件夹，并创建文件CNAME，在CNAME添加你的域名。如图<br><img src="/images/cname.jpeg" style="width: 600px;"><br>添加完后执行命令hexo d -g。(把这个文件发布github上面)<br>第二步：在你购买的网站里面进入DNS管理对DNS设置，将DNS修改为修改你域名的DNS地址为f1g1ns1.dnspod.net和f1g1ns2.dnspod.net，如果是其他网站购买的，也进行同样的配置。<br><img src="/images/dns_setting.jpeg" style="width: 600px;"><br>第三步：注册<a href="https://www.dnspod.cn" target="_blank" rel="external">DNSPod</a>(提供专业的第三方域名解析服务)，然后添加域名，添加响应的记录。如图：<br><img src="/images/dnspod_setting.jpeg" style="width: 600px;"><br>添加完后，要过段时间才能生效，过段时间后，就可以使用你的域名访问你在github上的博客啦。</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>在配置个人域名上踩了许多的坑，希望这个简单的教程，对后面的人会有用，也是自己配置过程的一个记录。hexo还有挺多好玩的东西，如主题的配置等，也可以配置主题后，自己对layout进行修改等，有兴趣的话，可以查看官方文档，然后自己研究。文章就到这~<a href="https://github.com/vinlyn/webpack-test" target="_blank" rel="external">示例地址</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;一直想写博客，之前对看过的知识没进行总结，很多知识点，看过即忘，每次都要再重新去找，显得麻烦，又不利于自己的提高，在偷懒了n
    
    </summary>
    
      <category term="教程" scheme="http://yoursite.com/categories/%E6%95%99%E7%A8%8B/"/>
    
      <category term="HEXO" scheme="http://yoursite.com/categories/%E6%95%99%E7%A8%8B/HEXO/"/>
    
    
      <category term="HEXO" scheme="http://yoursite.com/tags/HEXO/"/>
    
  </entry>
  
</feed>
